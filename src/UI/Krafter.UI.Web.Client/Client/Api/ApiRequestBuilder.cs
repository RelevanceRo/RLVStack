// <auto-generated/>
#pragma warning disable CS0618
using Krafter.Api.Client.Api.CronTicker;
using Krafter.Api.Client.Api.CronTickerOccurrence;
using Krafter.Api.Client.Api.CronTickerOccurrences;
using Krafter.Api.Client.Api.CronTickers;
using Krafter.Api.Client.Api.Options;
using Krafter.Api.Client.Api.Ticker;
using Krafter.Api.Client.Api.TickerFunctions;
using Krafter.Api.Client.Api.TickerHost;
using Krafter.Api.Client.Api.TickerRequest;
using Krafter.Api.Client.Api.TimeTicker;
using Krafter.Api.Client.Api.TimeTickers;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace Krafter.Api.Client.Api
{
    /// <summary>
    /// Builds and executes requests for operations under \api
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ApiRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The cronTicker property</summary>
        public global::Krafter.Api.Client.Api.CronTicker.CronTickerRequestBuilder CronTicker
        {
            get => new global::Krafter.Api.Client.Api.CronTicker.CronTickerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The cronTickerOccurrence property</summary>
        public global::Krafter.Api.Client.Api.CronTickerOccurrence.CronTickerOccurrenceRequestBuilder CronTickerOccurrence
        {
            get => new global::Krafter.Api.Client.Api.CronTickerOccurrence.CronTickerOccurrenceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The cronTickerOccurrences property</summary>
        public global::Krafter.Api.Client.Api.CronTickerOccurrences.CronTickerOccurrencesRequestBuilder CronTickerOccurrences
        {
            get => new global::Krafter.Api.Client.Api.CronTickerOccurrences.CronTickerOccurrencesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The cronTickers property</summary>
        public global::Krafter.Api.Client.Api.CronTickers.CronTickersRequestBuilder CronTickers
        {
            get => new global::Krafter.Api.Client.Api.CronTickers.CronTickersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The optionsPath property</summary>
        public global::Krafter.Api.Client.Api.Options.OptionsRequestBuilder OptionsPath
        {
            get => new global::Krafter.Api.Client.Api.Options.OptionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ticker property</summary>
        public global::Krafter.Api.Client.Api.Ticker.TickerRequestBuilder Ticker
        {
            get => new global::Krafter.Api.Client.Api.Ticker.TickerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tickerFunctions property</summary>
        public global::Krafter.Api.Client.Api.TickerFunctions.TickerFunctionsRequestBuilder TickerFunctions
        {
            get => new global::Krafter.Api.Client.Api.TickerFunctions.TickerFunctionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tickerHost property</summary>
        public global::Krafter.Api.Client.Api.TickerHost.TickerHostRequestBuilder TickerHost
        {
            get => new global::Krafter.Api.Client.Api.TickerHost.TickerHostRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tickerRequest property</summary>
        public global::Krafter.Api.Client.Api.TickerRequest.TickerRequestRequestBuilder TickerRequest
        {
            get => new global::Krafter.Api.Client.Api.TickerRequest.TickerRequestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The timeTicker property</summary>
        public global::Krafter.Api.Client.Api.TimeTicker.TimeTickerRequestBuilder TimeTicker
        {
            get => new global::Krafter.Api.Client.Api.TimeTicker.TimeTickerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The timeTickers property</summary>
        public global::Krafter.Api.Client.Api.TimeTickers.TimeTickersRequestBuilder TimeTickers
        {
            get => new global::Krafter.Api.Client.Api.TimeTickers.TimeTickersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Krafter.Api.Client.Api.ApiRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApiRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Krafter.Api.Client.Api.ApiRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApiRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618
